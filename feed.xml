<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://manuelvivo.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://manuelvivo.dev/" rel="alternate" type="text/html" /><updated>2025-07-07T10:14:22+00:00</updated><id>https://manuelvivo.dev/feed.xml</id><title type="html">Manuel Vivo .dev</title><subtitle>A place where you can learn about Android development</subtitle><entry><title type="html">Mobile System Design Interview book</title><link href="https://manuelvivo.dev/mobile-system-design-interview" rel="alternate" type="text/html" title="Mobile System Design Interview book" /><published>2025-06-17T00:00:00+00:00</published><updated>2025-06-17T00:00:00+00:00</updated><id>https://manuelvivo.dev/mobile-system-design-interview</id><content type="html" xml:base="https://manuelvivo.dev/mobile-system-design-interview">&lt;p&gt;Now available with doorstep delivery 🛒✨ &lt;a href=&quot;https://geni.us/bbg-msd&quot;&gt;https://geni.us/bbg-msd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Mobile System Design Interview book is finally here! 🤩📚 Now available with doorstep delivery 🛒✨&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://geni.us/bbg-msd&quot;&gt;Amazon link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.shroffpublishers.com/books/9789368082255/&quot;&gt;Indian publisher link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nail your next mobile system design interview! Whether you’re facing questions like “Design YouTube” or “Build a chat app”, you’ll learn a proven framework that works for both Android and iOS platforms. Real-world case studies walk you through complete solutions step by step, covering a broad range of mobile system design topics.&lt;/p&gt;

&lt;p&gt;This book is perfect for mobile engineers preparing for interviews and for engineering leaders, including managers and CTOs, who want to refine their architecture skills. You’ll tackle mobile-specific challenges like offline sync, performance optimization, and scalable data flow. Each chapter breaks down complex problems into manageable pieces, giving you the confidence to tackle any mobile system design question that comes your way.&lt;/p&gt;

&lt;h3 id=&quot;why-dive-in-right-away&quot;&gt;Why dive in right away?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;🏆 Built for YOU — whether you’re a mobile engineer gearing up for interviews, a tech lead sharpening architecture skills, or an industry leader curious about mobile internals.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;🔧 Practical to the core — real-world case studies, reusable checklists, and trade-off cheat sheets you can plug straight into your workflow.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;💡 5-step playbook — turns any “Design X” prompt into a structured answer that speaks the interviewer’s language.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;📝 7 fully solved questions — every decision, diagram, and pitfall exposed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;🔢 175 topics covering the full spectrum of mobile system design principles.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt;

&lt;p&gt;Chapter 1 Introduction&lt;/p&gt;

&lt;p&gt;Chapter 2 A Framework for Mobile System Design Interviews&lt;/p&gt;

&lt;p&gt;Chapter 3 Design a News Feed App&lt;/p&gt;

&lt;p&gt;Chapter 4 Design a Chat App&lt;/p&gt;

&lt;p&gt;Chapter 5 Design a Stock Trading App&lt;/p&gt;

&lt;p&gt;Chapter 6 Design a Pagination Library&lt;/p&gt;

&lt;p&gt;Chapter 7 Design a Hotel Reservation App&lt;/p&gt;

&lt;p&gt;Chapter 8 Design the Google Drive App&lt;/p&gt;

&lt;p&gt;Chapter 9 Design the YouTube app&lt;/p&gt;

&lt;p&gt;Chapter 10 Mobile System Design Building Blocks&lt;/p&gt;

&lt;p&gt;Quick Reference Cheat Sheet for MSD Interview&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Grab your copy now ➡️ &lt;a href=&quot;https://geni.us/bbg-msd&quot;&gt;https://geni.us/bbg-msd&lt;/a&gt; ➡️ Open the book ➡️ Master the framework ➡️ Tackle complex mobile design with clarity and confidence. 🚀&lt;/p&gt;

&lt;p&gt;If it helps you land that dream role, tag me — I’ll celebrate with you! 🥂🎉&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2025-06-17-mobile-system-design-interview-1.webp&quot; /&gt;
  &lt;small&gt;Book cover&lt;/small&gt;
&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2025-06-17-mobile-system-design-interview-2.webp&quot; /&gt;
  &lt;small&gt;Back cover&lt;/small&gt;
&lt;/p&gt;</content><author><name>Manuel Vivo</name></author><category term="architecture" /><summary type="html">Now available with doorstep delivery 🛒✨ https://geni.us/bbg-msd</summary></entry><entry><title type="html">Interviewing at Staff+ level</title><link href="https://manuelvivo.dev/interviewing-at-staff-level" rel="alternate" type="text/html" title="Interviewing at Staff+ level" /><published>2024-03-12T00:00:00+00:00</published><updated>2024-03-12T00:00:00+00:00</updated><id>https://manuelvivo.dev/interviewing-at-staff-level</id><content type="html" xml:base="https://manuelvivo.dev/interviewing-at-staff-level">&lt;p&gt;In this blog post, I’m covering how I prepared for various Staff level interviews at different companies&lt;/p&gt;

&lt;p&gt;Interviewing for Staff+ Individual Contributor (IC) level positions can be both challenging and exhilarating. As you aspire to get hired in these positions, you may find yourself grappling with uncertainties about your adaptability to new company cultures, tech stacks, and business domains. So… how should you prepare to excel at these interviews?&lt;/p&gt;

&lt;p&gt;In this blog post, I’m covering how I prepared for various Staff level interviews at different companies. Given the versatile skill set a Staff+ position requires, each company might have their unique interview processes. You need to be flexible and ready for any type of interview. Staff+ positions are scarce, and there’s a fair bit of competition. Making the company wait in order to prepare for their different interviews might mean losing out to someone who was ready to impress from day one.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: It’s perfectly okay if you’re unfamiliar with Staff+ positions if you’ve recently begun your career as an IC, or if you’re simply curious about what it takes to get there. This blog post is relevant for you too 😊 Keep reading! Companies may also conduct these types of interviews at other levels.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have experience interviewing at FAANG, as well as large and medium-sized tech companies, but I won’t divulge specifics about the companies I interviewed with or the intricacies of their processes, as these can evolve rapidly. Interviewers will tell you everything you need to know at the right time. Instead, I’ll give you insights into the most common interview types: &lt;strong&gt;1) Data Structures and Algorithms (DS/A), 2) area of expertise&lt;/strong&gt; (Android in my case), &lt;strong&gt;3) system design, and 4) behavioural interviews&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But in case you’re wondering… Yes, I did! I passed multiple interview processes and joined Bumble Inc. 🐝 as a Staff Android Engineer. In the upcoming sections, I’m explaining how to prepare for those 4 types of interviews, and some tips to help you nail them.&lt;/p&gt;

&lt;h2 id=&quot;are-you-ready-to-be-a-staff-engineer&quot;&gt;Are you ready to be a Staff+ engineer?&lt;/h2&gt;

&lt;p&gt;You, better than anyone, know if you’re ready to be a Staff+ engineer or if it’s a goal you’re aspiring towards. This journey to this level involves not just technical skills but also a keen understanding of leadership and impact. I wouldn’t be giving justice to the topic if I tried to give you advice in a couple of paragraphs. For that, I’m relying on amazing authors who wrote entire books about the topic.&lt;/p&gt;

&lt;p&gt;My favourite book to understand what the role is about is &lt;a href=&quot;https://www.goodreads.com/book/show/61058107-the-staff-engineer-s-path&quot;&gt;&lt;em&gt;The Staff’s Engineer’s Path&lt;/em&gt; by Tanya Reilly&lt;/a&gt;. This is an authentic masterpiece. Another book you might find interesting is &lt;a href=&quot;https://www.goodreads.com/book/show/56481725-staff-engineer&quot;&gt;&lt;em&gt;Staff Engineer&lt;/em&gt; by Will Larson&lt;/a&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2024-03-12-interviewing-at-staff-level-1.webp&quot; /&gt;
  &lt;small&gt;Picture of the Staff Engineer books&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;In a nutshell, a Staff+ IC engineer typically operates at a senior level within a company. They may have extensive technical knowledge on a particular area and often take leadership roles. They’re responsible for driving technical excellence, providing mentorship, and contributing to high-level decision-making.&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-dsa-interview&quot;&gt;Preparing the DS/A interview&lt;/h2&gt;

&lt;p&gt;The Data Structures and Algorithms interview is probably the most controversial one — some love it, while others hate it! I can understand why some companies choose to conduct this kind of interviews:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They help refine your coding skills. You are able to translate thoughts into functional code.&lt;/li&gt;
  &lt;li&gt;A simple question can be built upon to see how the candidate reasons about, collaborates, and incorporates feedback from the interviewer.&lt;/li&gt;
  &lt;li&gt;They force you to think about a problem in a structural way.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Those 3 points are crucial to succeed in a DS/A interview. Let’s go one by one.&lt;/p&gt;

&lt;h3 id=&quot;improving-your-coding-skills&quot;&gt;Improving your coding skills&lt;/h3&gt;

&lt;p&gt;Apart from learning the different types of exercises you can face, you need to solve the problem presented to you. Getting to a working solution is indispensable. The efficiency with which you arrive at a solution and make improvements can significantly impact the depth of discussions with your interviewer, which often translates into a successful interview.&lt;/p&gt;

&lt;p&gt;To get that efficiency, I recommend learning the most common utilities in your programming language of choice. In Kotlin, I got familiar with uncommon Collections APIs that could come in handy in some exercises. There are helpful Kotlin Collections cheat sheets you can use; for example, I used &lt;a href=&quot;https://jussi.hallila.com/Kollections/&quot;&gt;this one&lt;/a&gt; by Jussi Hallila. I also refreshed my knowledge on some useful APIs like the Random API, the Mutex API, and thread-safe collections to name a few. This knowledge not only streamlines your coding but also opens avenues for more insightful discussions during the interview.&lt;/p&gt;

&lt;h3 id=&quot;practising&quot;&gt;Practising&lt;/h3&gt;

&lt;p&gt;The best way to get better at this type of interview is by practising, practising, and more practising. Dust off that familiar green cover of &lt;a href=&quot;https://www.goodreads.com/book/show/12544648-cracking-the-coding-interview&quot;&gt;&lt;em&gt;Cracking the Coding Interview&lt;/em&gt; by Gayle L. McDowell&lt;/a&gt; and diligently work through the different chapters. Additionally, prove your DS/A skills on other platforms! I used &lt;a href=&quot;https://leetcode.com/&quot;&gt;LeetCode&lt;/a&gt; and was quite happy with it. Go through as many exercises as possible from the &lt;a href=&quot;https://www.techinterviewhandbook.org/grind75&quot;&gt;Grind 75 questions&lt;/a&gt; to gain a thorough understanding of all the possible DS/A questions. Also, do mock interviews to try those skills out in front of another human being. For this, I used &lt;a href=&quot;https://www.pramp.com&quot;&gt;Pramp&lt;/a&gt;: I missed some variety, but overall, it offered what I needed.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2024-03-12-interviewing-at-staff-level-2.webp&quot; /&gt;
  &lt;small&gt;Picture of the Cracking the Coding Interview book and some hand-written notes in preparation for the DS/A interview&lt;/small&gt;
&lt;/p&gt;

&lt;h3 id=&quot;you-and-the-interviewer&quot;&gt;You and the interviewer&lt;/h3&gt;

&lt;p&gt;Different interviewers have different interview styles but the most common type I’ve seen is that interviewer who aims to understand your limits while ensuring a positive experience. In your interview, you’ll probably start with a question that has a somewhat straightforward solution using brute force.&lt;/p&gt;

&lt;p&gt;How you get to the solution is as important as &lt;em&gt;what&lt;/em&gt; you type. Think out loud and discuss different alternatives with your interviewer: their trade-offs, their time and space complexities, possible improvements, etc. The best advice I can give you is to actively listen to your interviewer’s feedback and apply it to your approach. Unless you find yourself in an unusual circumstance, most interviewers genuinely want to see you succeed! They are likely to offer hints or guidance to help you navigate the problem.&lt;/p&gt;

&lt;h3 id=&quot;structure-your-way-to-solve-the-problem&quot;&gt;Structure your way to solve the problem&lt;/h3&gt;

&lt;p&gt;To tackle a specific problem, I follow the problem-solving structure outlined in &lt;em&gt;Cracking the coding interview&lt;/em&gt; book: &lt;strong&gt;Listen, think of edge cases, brute force, optimise, walk through your approach, implement, and test&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In my preparation for Staff positions, I found &lt;a href=&quot;https://adambennett.dev/2021/11/on-interviewing/&quot;&gt;Adam Bennet’s &lt;em&gt;On interviewing&lt;/em&gt; blog post&lt;/a&gt; a valuable resource. In particular, I enjoyed his Github project, containing gems like the &lt;a href=&quot;https://github.com/ditn/interviewprep/blob/main/Common%20Strategies.md&quot;&gt;common strategies for DS/A interview problems&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-android-or-your-area-of-expertise-interview&quot;&gt;Preparing the Android (or your area of expertise) interview&lt;/h2&gt;

&lt;p&gt;Android interviews can take diverse formats. You may be tasked with building an app on the spot, improving an existing app, identifying and fixing intentional bugs in the codebase, or completing a home assessment that you subsequently discuss during the interview.&lt;/p&gt;

&lt;p&gt;If you need to complete a home assessment, I highly recommend reading &lt;a href=&quot;https://blog.blundellapps.co.uk/android-job-interview-take-home-test-cheat-sheet/&quot;&gt;Paul Blundell’s Android interviews blog post&lt;/a&gt;. Also, look at his &lt;a href=&quot;https://github.com/blundell/polkiemon&quot;&gt;implementation of one of those home assessment apps&lt;/a&gt; and learn how to implement pagination on your own.&lt;/p&gt;

&lt;p&gt;If you’re tasked with building an app from scratch during the interview, practice creating a simple app with two screens — a list and a detail screen — using an MVx architecture. If you need to improve an existing application, I relied on the above mostly. The rest of my preparation came with my experience as an Android developer.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2024-03-12-interviewing-at-staff-level-3.webp&quot; /&gt;
  &lt;small&gt;Picture of the Head First Design Patterns book and some hand-written notes in preparation for the Android interview&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;Given my confidence in topics like Architecture, Dependency Injection, Jetpack Compose, or threading, I didn’t prepare much about them. However, it’s advisable to find out about the company’s Android tech stack and get to know those tools and how they align with your existing knowledge.&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-system-design-interview&quot;&gt;Preparing the System design interview&lt;/h2&gt;

&lt;p&gt;The system design interview is my favourite one by far. You might think they don’t require that much preparation, but they do if you want to nail them. Call me systematic, but I believe these interviews also benefit from a methodical strategy.&lt;/p&gt;

&lt;p&gt;When facing a system design problem, it’s crucial to know which questions to ask upfront. The key is to ask questions in a logical sequence, adjusting your choices based on the information gathered. I usually start gathering requirements from the interviewer to understand what we’re building and for whom. Ask for both functional and non-functional requirements such as Daily Active Users (DAU), authentication, offline mode, pagination, etc.&lt;/p&gt;

&lt;p&gt;Then, you can make informed decisions and dive into the details of choosing the right network protocol (e.g. REST, gRPC, GraphQL, etc.) and defining the data models based on the business requirements and the end points to communicate with the backend.&lt;/p&gt;

&lt;p&gt;I had &lt;a href=&quot;https://topmate.io/manuelvivo/799730&quot;&gt;cheat sheets&lt;/a&gt; with questions based on priority (i.e. what to ask first), and other cheat sheets based on topics such as performance, networking, data management, etc. Remember that system design problems might not always have a single right answer. Engage in dialogue, discuss trade-offs, and work towards a shared understanding with your interviewer.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2024-03-12-interviewing-at-staff-level-4.webp&quot; /&gt;
  &lt;small&gt;Picture of the System Design Interview and Designing Data-Intensive Applications books and some hand-written notes in preparation for the System design interview&lt;/small&gt;
&lt;/p&gt;

&lt;h3 id=&quot;mobile-system-design-interview&quot;&gt;Mobile system design interview&lt;/h3&gt;

&lt;p&gt;If you’re in mobile app development, the go-to resource for acing the system design interview is &lt;a href=&quot;https://github.com/weeeBox/mobile-system-design&quot;&gt;Alex Lementuev’s &lt;em&gt;Mobile system design&lt;/em&gt; Github project&lt;/a&gt;. This comprehensive repository contains everything you need to succeed in this type of interview. Pay particular attention to the pros and cons outlined for the different topics, as that’s indispensable to justify your decision-making. Apart from learning the different choices you can make, this resource also helps you structure the way you approach the interview. To see how to apply that knowledge in an actual interview, check out the &lt;a href=&quot;https://www.youtube.com/watch?v=PYsXmMt5Kdw&amp;amp;list=PLaMN-JyH50OYAfxJEpiQTYTD-gxTf7x9d&quot;&gt;mock interviews in his Youtube channel&lt;/a&gt;. I highly recommend observing how people approach the problems.&lt;/p&gt;

&lt;p&gt;When covering the Architecture of the mobile app, think about the &lt;a href=&quot;https://developer.android.com/topic/architecture&quot;&gt;recommended layered Android architecture&lt;/a&gt; and &lt;a href=&quot;https://developer.android.com/topic/architecture#unidirectional-data-flow&quot;&gt;Unidirectional Data Flow (UDF)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Apart from this, I read content from the &lt;a href=&quot;https://blog.bytebytego.com/archive&quot;&gt;ByteByteGo newsletter&lt;/a&gt; and the System design interview books (&lt;a href=&quot;https://www.goodreads.com/book/show/54109255-system-design-interview-an-insider-s-guide&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://www.goodreads.com/book/show/60631342-system-design-interview-an-insider-s-guide&quot;&gt;2&lt;/a&gt;) by &lt;a href=&quot;https://twitter.com/alexxubyte&quot;&gt;Alex Xu&lt;/a&gt;, refresh the different design patterns, and read the &lt;a href=&quot;https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications&quot;&gt;&lt;em&gt;Designing Data-Intensive Applications&lt;/em&gt; book by Martin Kleppmann&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As with any other interview type, you need to practice, practice, and more practice. Find a feature of your favourite app and think about how you would design it. For more inspiration, you can see the exercises listed in the &lt;a href=&quot;https://github.com/weeeBox/mobile-system-design/tree/master/exercises&quot;&gt;Mobile system design project&lt;/a&gt; mentioned above.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2024-03-12-interviewing-at-staff-level.webp&quot; /&gt;
  &lt;small&gt;Hand-written completed exercises in preparation for the Mobile system design interview&lt;/small&gt;
&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-behavioural-interview&quot;&gt;Preparing the behavioural interview&lt;/h2&gt;

&lt;p&gt;To prepare for the behavioural interview, you can follow the approach outlined in &lt;em&gt;Cracking the Coding Interview&lt;/em&gt; book. Prepare a table with your most important projects and systematically reflect on key aspects. For example: what was most challenging, what you learned, what was most interesting, the hardest bug, what you enjoyed the most, conflicts, what you’d do differently, leadership, and failures.&lt;/p&gt;

&lt;p&gt;Other questions can be: a time when you learned a valuable lesson, your ability to move the team forward, to have an influence outside of your team, passion for wanting to make things happen, a time when your performance exceeded expectations, a time when you received a performance review that you felt was unjustified, etc.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2024-03-12-interviewing-at-staff-level-5.webp&quot; /&gt;
  &lt;small&gt;Table with a TL;DR; of my involvement in different professional projects&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;Remember that the interview is a Staff+ role. Focus on expertise, leadership, and impact. You should be able to give examples of how the work you did linked to business impact, how you acted like a multiplier for other developers, and demonstrate that you’re thinking about business outcomes alongside technical expertise. This structured approach ensures that you’re well-prepared to articulate your experiences, achievements, and challenges during the behavioral interview.&lt;/p&gt;

&lt;p&gt;Here’s the best tip ever: &lt;strong&gt;DO NOT LIE!&lt;/strong&gt; Honesty is key throughout the interview process. Even if you manage to succeed by providing inaccurate information, it can lead to misunderstandings when you join the team. But don’t be shy either! It’s your interview and your moment to shine ⭐. You need to sell yourself. Focus on your personal achievements and what you contributed to the projects.&lt;/p&gt;

&lt;h3 id=&quot;refining-your-leadership-style&quot;&gt;Refining your leadership style&lt;/h3&gt;

&lt;p&gt;Leadership comes with experience, but refining your leadership style can be accelerated by applying insights from relevant books. In addition to the Staff engineer books I mentioned in the introduction, consider exploring the following books that I enjoyed a lot:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/33517721-the-culture-code&quot;&gt;&lt;em&gt;The Culture Code&lt;/em&gt;) by Daniel Coyle&lt;/a&gt;: learn different skills to build an exceptional team. Focus on creating a culture of safety, sharing vulnerability, and establishing a clear sense of purpose.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/15014.Crucial_Conversations&quot;&gt;&lt;em&gt;Crucial Conversations&lt;/em&gt; by Kerry Patterson&lt;/a&gt;: learn essential techniques for what to do before opening your mouth, how to open your mouth, and how to bring the conversation to a constructive conclusion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/22085568-the-culture-map&quot;&gt;&lt;em&gt;The Culture Map&lt;/em&gt; by Erin Meyer&lt;/a&gt;: understand and navigate cultural differences in this insightful and practical guide, perfect for both your work and personal life.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/123857637-never-split-the-difference&quot;&gt;&lt;em&gt;Never Split the Difference&lt;/em&gt; by Chris Voss&lt;/a&gt;: discover negotiation skills to listen, empathise, and get the most out of your conversations with people.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/29939161-radical-candor&quot;&gt;&lt;em&gt;Radical Candor&lt;/em&gt; by Kim Scott&lt;/a&gt;: learn how to care personally while challenging your team directly to get optimal performance.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you read these books, use your own judgement to select and implement the ideas that resonate with you. &lt;strong&gt;Authenticity is key&lt;/strong&gt;. Adapt and apply the lessons in a way that aligns with your unique leadership style.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2024-03-12-interviewing-at-staff-level-6.webp&quot; /&gt;
  &lt;small&gt;Image with books to refine your leadership style&lt;/small&gt;
&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Preparing for Staff+ IC level interviews requires a multifaceted approach that includes technical, behavioural, and leadership aspects. The journey involves navigating through various interview formats, from DS/A to system design and behavioural assessments.&lt;/p&gt;

&lt;p&gt;Embracing a structured preparation strategy is essential: learn about the different topics, choose your own strategy, practice with mock interviews, listen actively, and work with your interviewer toward the best possible solution.&lt;/p&gt;

&lt;p&gt;Take the time to prepare for the 4 different interviews properly. Plan your time as it works for you. You can spend a couple of weeks on each interview to deep dive into the different aspects of it. And when the interviews are getting closer, maybe you can keep studying one type a day.&lt;/p&gt;

&lt;p&gt;What makes you unique is your own strengths and experiences. Even if you learn a lot from external resources, tint your interviews with personal anecdotes and learnings. That will make those special, and you’ll be able to stand out from the crowd.&lt;/p&gt;

&lt;p&gt;Lastly, when facing interviews… Have fun! Look at those problems as opportunities that you’re genuinely willing to overcome. You’re a capable and confident professional with a wealth of knowledge and skills. You got this! Best of luck on your interview journey!&lt;/p&gt;

&lt;h2 id=&quot;bonus-you-got-the-job&quot;&gt;[Bonus] You got the job!&lt;/h2&gt;

&lt;p&gt;Congratulations on landing the job! Before starting your new position, I’d recommend reading &lt;a href=&quot;https://www.goodreads.com/book/show/15824358-the-first-90-days&quot;&gt;&lt;em&gt;The First 90 days&lt;/em&gt; book by Michael Watkins&lt;/a&gt;. This book can help you onboard into your new position. Even if the company has its own onboarding plan, prepare your personal journey and run both in tandem.&lt;/p&gt;

&lt;p&gt;Oh, and here’s a friendly reminder: show some love to your new colleagues and their code. No judgments! Everything they’ve done has a story. You’re there to level up the game, not to rain on anyone’s parade. Cheers to your new adventure! 🚀&lt;/p&gt;

&lt;p&gt;Good luck! 🍀&lt;/p&gt;</content><author><name>Manuel Vivo</name></author><category term="mentoring" /><summary type="html">In this blog post, I’m covering how I prepared for various Staff level interviews at different companies</summary></entry><entry><title type="html">Prepare your interviews with me</title><link href="https://manuelvivo.dev/prepare-interviews-with-me" rel="alternate" type="text/html" title="Prepare your interviews with me" /><published>2024-01-29T00:00:00+00:00</published><updated>2024-01-29T00:00:00+00:00</updated><id>https://manuelvivo.dev/prepare-interviews-with-me</id><content type="html" xml:base="https://manuelvivo.dev/prepare-interviews-with-me">&lt;p&gt;Mock interviews, cheat sheets, 1:1 sessions, tips, and more!&lt;/p&gt;

&lt;h2 id=&quot;let-me-help-you&quot;&gt;Let me help you!&lt;/h2&gt;

&lt;p&gt;Got an interview coming up and feeling a bit shaky? Don’t worry—I’ve got your back!&lt;/p&gt;

&lt;p&gt;On &lt;a href=&quot;https://topmate.io/manuelvivo&quot;&gt;my services website&lt;/a&gt;, I offer personalized sessions that can help you nail your next interview.&lt;/p&gt;

&lt;p&gt;I can help you with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://topmate.io/manuelvivo/799730&quot;&gt;Mobile System Design cheat sheets&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://topmate.io/manuelvivo/772854&quot;&gt;Interview preparation and tips&lt;/a&gt; sessions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://topmate.io/manuelvivo/772893&quot;&gt;Data Structures and Algorithms mock interview&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://topmate.io/manuelvivo/772858&quot;&gt;Android mock interview&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://topmate.io/manuelvivo/772890&quot;&gt;System Design mock interview&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://topmate.io/manuelvivo/774964&quot;&gt;Other 1:1 sessions&lt;/a&gt; to help you with anything you need.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also offer career mentorship and other Android-related sessions. For more information, check all the possibilities in &lt;a href=&quot;https://topmate.io/manuelvivo&quot;&gt;my services account&lt;/a&gt;.&lt;/p&gt;</content><author><name>Manuel Vivo</name></author><category term="mentoring" /><summary type="html">Mock interviews, cheat sheets, 1:1 sessions, tips, and more!</summary></entry><entry><title type="html">Crash Course on the Android UI Layer | Part 2</title><link href="https://manuelvivo.dev/crash-course-ui-layer-part-2" rel="alternate" type="text/html" title="Crash Course on the Android UI Layer | Part 2" /><published>2023-12-19T00:00:00+00:00</published><updated>2023-12-19T00:00:00+00:00</updated><id>https://manuelvivo.dev/crash-course-ui-layer-part-2</id><content type="html" xml:base="https://manuelvivo.dev/crash-course-ui-layer-part-2">&lt;p&gt;Part 2 - State Holders and Saving State&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;This blog post series aims to summarise the &lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer&quot;&gt;Android Developer guidance on the UI layer&lt;/a&gt;. We’ll explore all the entities involved in it, understand the role each part plays, and discuss best practices.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;By the end of this series, you will have a general understanding of what happens on the UI layer and how to best handle state and logic within it, the various APIs involved, and how to use them. Additionally, we’ll provide decision trees to assist you when you’re in doubt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://manuelvivo.dev/crash-course-ui-layer-part-1&quot;&gt;&lt;strong&gt;In part 1&lt;/strong&gt;&lt;/a&gt;, we covered the UI and the UI state. You should already know the different entities present on the UI layer, and how to think about the UI and UI state effectively.&lt;/p&gt;

&lt;p&gt;Now it’s &lt;strong&gt;time for Part 2&lt;/strong&gt;! We’ll cover state holders and other UI layer-related topics such as where to hoist state and save UI state on Android.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you prefer to consume this content in video format, check out &lt;a href=&quot;https://www.droidcon.com/2023/11/15/peeling-back-the-layers-unmasking-the-ui-nknown&quot;&gt;the talk I delivered at Droidcon London 2023&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;state-holders&quot;&gt;State holders&lt;/h2&gt;

&lt;p&gt;State holders simplify the UI by handling logic and/or exposing UI state. In this section, we’ll see how to implement state holders and the implementation details to consider.&lt;/p&gt;

&lt;p&gt;To determine the implementation details, we first need to identify the types of logic commonly found in an Android app.&lt;/p&gt;

&lt;h3 id=&quot;types-of-logic&quot;&gt;Types of logic&lt;/h3&gt;

&lt;p&gt;We have already discussed that &lt;strong&gt;business logic&lt;/strong&gt; involves implementing the product requirements that specify how application data is created, stored, and modified. When business logic is present in the UI layer, it’s recommended to manage this logic at the screen level. We’ll see more of this later.&lt;/p&gt;

&lt;p&gt;Another type of logic is the &lt;strong&gt;UI logic&lt;/strong&gt;. UI logic determines how to display state changes on the screen. While business logic dictates &lt;em&gt;what&lt;/em&gt; to do with data, UI logic determines &lt;em&gt;how&lt;/em&gt; to visually display it. The UI logic is dependent on the UI configuration.&lt;/p&gt;

&lt;p&gt;For instance, in a typical app, displaying a details screen may involve navigation when the app is running on a phone. However, it could entail showing an element next to another when running on a tablet.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-19-crash-course-ui-layer-part-2_1.webp&quot; /&gt;
  &lt;small&gt;UI logic depends on the UI configuration. Displaying a details screen may involve navigation when the app runs on a phone or showing an element next to another when running on a tablet. You can see that in the &lt;a href=&quot;https://github.com/android/nowinandroid&quot;&gt;Now in Android&lt;/a&gt; interests screen.&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;The different types of logic respond differently to configuration changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;UI logic should re-execute&lt;/strong&gt; if it’s affected by a configuration change.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Business logic should generally continue&lt;/strong&gt; after a configuration change.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, the UI logic that determines whether to display the bottom bar or the navigation rail should be re-executed or re-evaluated after a screen size configuration change. On the other hand, the business logic for following a particular interest or refreshing them shouldn’t be cancelled or restarted simply because the user rotated or unfolded the device. Such interruption wouldn’t provide a good user experience.&lt;/p&gt;

&lt;h3 id=&quot;where-to-handle-that-logic&quot;&gt;Where to handle that logic&lt;/h3&gt;

&lt;p&gt;Business logic on the UI layer should be handled as close as possible to the screen level. Most of the business logic is handled by the data layer. Thus, keeping it close to the screen makes it easier to scope the logic correctly and prevents low-level UI components from becoming tightly coupled to the business logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Business logic should be handled by the screen level state holder&lt;/strong&gt;, which would normally extend from &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/viewmodel&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidX.ViewModel&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When it comes to UI logic, it’s acceptable to manage it within the UI itself if the logic and state involved are relatively straightforward. However, when the UI becomes more complicated, it’s a good idea to &lt;strong&gt;delegate that UI logic complexity to a plain class state holder&lt;/strong&gt;. In this case, the state holder wouldn’t extend from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidX.ViewModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We’ll see more of this in the upcoming sections! Now, let’s see how the different types of state and logic related to each other:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-19-crash-course-ui-layer-part-2_2.webp&quot; /&gt;
  &lt;small&gt;Diagram of how data flows in the app and the type of logic applied&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;As a summary of what happens on a typical screen, the data layer exposes application data to the rest of the hierarchy. The ViewModel then applies business logic to that data to produce the screen UI state. The UI itself or a plain state holder class observes the screen UI state to modify UI elements or its state.&lt;/p&gt;

&lt;h2 id=&quot;handling-business-logic--androidxviewmodel&quot;&gt;Handling business logic — &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidX.ViewModel&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We’ve discussed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidX.ViewModel&lt;/code&gt; or &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/viewmodel&quot;&gt;Architecture Components &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;&lt;/a&gt; class quite extensively as the implementation detail of a screen-level state holder.&lt;/p&gt;

&lt;p&gt;In the code snippet below, we can observe its main functionalities: 1) exposing the screen UI state and 2) handling business logic.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@HiltViewModel&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterestsViewModel&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userDataRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDataRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;authorsRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorsRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;topicsRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TopicsRepository&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StateFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterestsUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;followTopic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;followedTopicId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;followed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewModelScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;userDataRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggleFollowedTopicId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;followedTopicId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;followed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But why is the ViewModel the right place for this?&lt;/p&gt;

&lt;h3 id=&quot;androidxviewmodel-benefits&quot;&gt;androidX.ViewModel benefits&lt;/h3&gt;

&lt;p&gt;The main benefit is that &lt;strong&gt;ViewModel survives configuration changes&lt;/strong&gt;, offering a longer lifetime than the screen itself. You can scope a ViewModel to an Activity, Fragment, Navigation graph or the destination of a Navigation graph. When a configuration change happens, the system provides the same instance of the ViewModel.&lt;/p&gt;

&lt;p&gt;Surviving configuration changes makes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidX.ViewModel&lt;/code&gt; the perfect place to expose the screen UI state and handle business logic. The screen UI state is also cached and instantly available before and after a configuration change. And business logic will continue executing if it was initiated with a ViewModel-scoped &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CoroutineScope&lt;/code&gt; (e.g. &lt;a href=&quot;https://manuelvivo.dev/viewmodelscope&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewModelScope&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Another advantage lies in its &lt;strong&gt;seamless integration with other Jetpack libraries&lt;/strong&gt;, particularly with &lt;a href=&quot;https://developer.android.com/guide/navigation&quot;&gt;Jetpack Navigation&lt;/a&gt;. Navigation retains the same instance of a ViewModel in memory when the destination is part of the back stack. This enables you to navigate back and forth between destinations in the back stack, with the data instantly available on the screen, without the need to reload the data every time you navigate back to that destination.&lt;/p&gt;

&lt;p&gt;Jetpack Navigation also automatically destroys the instance of a ViewModel when the destination is no longer part of the back stack. Making it safe to go to a previous destination without seeing the previous user data on the screen.&lt;/p&gt;

&lt;p&gt;Other Jetpack integrations include &lt;a href=&quot;https://developer.android.com/training/dependency-injection/hilt-android&quot;&gt;Hilt&lt;/a&gt;. By using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@HiltViewModel&lt;/code&gt; annotation, you can effortlessly obtain ViewModels with dependencies from the domain or data layers.&lt;/p&gt;

&lt;h3 id=&quot;androidxviewmodel-best-practices&quot;&gt;androidX.ViewModel best practices&lt;/h3&gt;

&lt;p&gt;ViewModel’s scoping is what makes this type suitable as an implementation detail of a screen-level state holder. However, this power shouldn’t be abused. Here are some best practices to keep in mind when using this class:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Use it at the screen level&lt;/strong&gt;. Avoid using a ViewModel to handle the complexity of &lt;em&gt;reusable&lt;/em&gt; UI elements. Due to its scoping, the same UI elements under the same ViewModel scope would get the &lt;em&gt;same&lt;/em&gt; instance of a ViewModel. In most cases, this is undesirable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Make the ViewModel generic enough to accommodate any UI form factor&lt;/strong&gt;. The ViewModel should not be aware of which UI is using it. Keep the ViewModel’s API surface (exposed Screen UI state and functions exposed) representative of the application data it handles, rather than including UI-specific details. For example, when indicating that data is loading, the screen UI state might contain a field called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isLoading&lt;/code&gt; rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showLoadingSpinner&lt;/code&gt;. How the UI communicates data loading to the user is only relevant to the UI.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don’t hold references to lifecycle-related APIs&lt;/strong&gt;. The ViewModel has a longer lifetime than the UI, and retaining references to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resources&lt;/code&gt; objects can lead to memory leaks.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Don’t pass ViewModels around&lt;/strong&gt;. Considering all the points mentioned, keep the ViewModel class as close as possible to the screen level. Otherwise, you might inadvertently provide low-level components with access to more state and logic than they actually need.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;androidxviewmodel-gotchas&quot;&gt;androidX.ViewModel gotchas&lt;/h3&gt;

&lt;p&gt;Not everything is perfect in the ViewModel realm. There are certain considerations to keep in mind when using this API, especially in regard to ViewModel’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewModelScope&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Work initiated using &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewModelScope&lt;/code&gt; continues to execute while the ViewModel is in memory&lt;/strong&gt;. That’s good but can also lead to issues if the work runs for an extended period. For long-running work that might take more than 10 seconds to complete, consider other alternatives such as &lt;a href=&quot;https://developer.android.com/guide/background/persistent/getting-started&quot;&gt;WorkManager&lt;/a&gt;. More about &lt;a href=&quot;https://developer.android.com/guide/background&quot;&gt;background work in the docs&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Unit testing work triggered by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;viewModelScope&lt;/code&gt; requires some additional setup in the testing environment. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MainDispatcher&lt;/code&gt; must be &lt;a href=&quot;https://developer.android.com/kotlin/coroutines/test#setting-main-dispatcher&quot;&gt;replaced&lt;/a&gt; in tests.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-androidxviewmodel&quot;&gt;Using androidX.ViewModel&lt;/h3&gt;

&lt;p&gt;Does this section mean you always need to use ViewModel? Well, as the implementation of a screen-level state holder, yes, but only if the benefits apply to your app.&lt;/p&gt;

&lt;p&gt;If you care about configuration changes (which, you should!) and/or you’re using other Jetpack libraries, it might make sense to use it. However, even if you decide not to, consider introducing a plain screen-level state holder class to handle the business logic complexity at the screen level.&lt;/p&gt;

&lt;h2 id=&quot;handling-ui-logic--plain-state-holder-class&quot;&gt;Handling UI logic — Plain state holder class&lt;/h2&gt;

&lt;p&gt;You should &lt;strong&gt;introduce a state holder class when your UI starts growing in complexity&lt;/strong&gt;. The threshold depends on you and your team. It’s a matter of when you feel the need to simplify the UI.&lt;/p&gt;

&lt;p&gt;In the upcoming code snippet, there’s no immediate need to create a state holder for the UI. It merely contains an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expanded&lt;/code&gt; boolean that is modified when the user interacts with the UI.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Composable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NiaDropdownMenuButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expanded&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remember&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableStateOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;NiaOutlinedButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expanded&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;NiaDropdownMenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expanded&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expanded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;onDismissRequest&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expanded&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the UI requires more state and the associated logic becomes more complex, introduce a state holder. This is precisely what the Compose library does for some of its components. The following code snippet belongs to the &lt;a href=&quot;https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:compose/material/material/src/commonMain/kotlin/androidx/compose/material/Drawer.kt;l=118&quot;&gt;state holder of the various Drawer composables&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Stable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DrawerState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;initialValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DrawerValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;confirmStateChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DrawerValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;swipeableState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;SwipeableState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;currentValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DrawerValue&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swipeableState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DrawerValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Open&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DrawerValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnimationSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animateTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DrawerValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AnimationSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;swipeableState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;animateTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A few points to observe there:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;It holds state such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentValue&lt;/code&gt; of the Drawer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;State holders are composable. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DrawerState&lt;/code&gt; internally depends on another state holder: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SwipeableState&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It manages UI logic, including actions like opening the drawer and animating to a specific value.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just as Compose offers these state holders, you can implement similar patterns in your project to simplify the UI. The following code snippet belongs to &lt;a href=&quot;https://github.com/android/nowinandroid/blob/main/app/src/main/kotlin/com/google/samples/apps/nowinandroid/ui/NiaAppState.kt&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NiaAppState&lt;/code&gt;&lt;/a&gt;, the state holder of the &lt;a href=&quot;https://github.com/android/nowinandroid/blob/main/app/src/main/kotlin/com/google/samples/apps/nowinandroid/ui/NiaApp.kt&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NiaApp&lt;/code&gt;&lt;/a&gt; composable function.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Stable&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NiaAppState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;navController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NavHostController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;windowSizeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WindowSizeClass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;currentDestination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NavDestination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Composable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navController&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currentBackStackEntryAsState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;shouldShowBottomBar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowSizeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widthSizeClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WindowWidthSizeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;windowSizeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;heightSizeClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WindowHeightSizeClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compact&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;navigate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onBackClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a similar fashion, it exposes UI state such as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;currentDestination&lt;/code&gt; and whether or not to show the bottom bar, while also managing UI logic like navigating and handling back-click events.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: In Compose, the naming convention for state holders is to end with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt;. That’s why we’re naming the classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NiaAppState&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DrawerState&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;plain-state-holder-classes-best-practices&quot;&gt;Plain state holder classes best practices&lt;/h3&gt;

&lt;p&gt;It’s actually recommended to create a state holder for &lt;em&gt;reusable&lt;/em&gt; UI components. This enhances the reusability of the UI and provides external control.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plain state holder classes can hold references of lifecycle-related APIs&lt;/strong&gt;. These instances follow the UI lifecycle. When the UI goes through a configuration change, a new instance of the state holder is created. Thus, it’s acceptable to hold references to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Context&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Resources&lt;/code&gt; because there won’t be any memory leaks. In Jetpack Compose, these state holders are also scoped to the Composition.&lt;/p&gt;

&lt;p&gt;If your plain class requires business logic, it’s a good practice to inject that functionality into the class. Whoever injects this functionality can ensure it outlives the UI scope.&lt;/p&gt;

&lt;h3 id=&quot;handling-large-viewmodels&quot;&gt;Handling large ViewModels&lt;/h3&gt;

&lt;p&gt;If a ViewModel is handling the business logic complexity of several sizeable UI elements, it could potentially become large and challenging to manage and reason about. How could we simplify the ViewModel?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Introduce the domain layer&lt;/strong&gt;. Delegate the business logic complexity of the ViewModel to &lt;em&gt;use cases&lt;/em&gt; that handle interactions with different repositories. However, this approach may still result in a ViewModel with a substantial list of use cases to depend on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Create multiple state holders&lt;/strong&gt; for the various elements of the UI and hoist them in the ViewModel so that they can get all its benefits. The ViewModel essentially becomes a state hoisting mechanism that survives configuration changes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Instead of #2, you might consider creating &lt;strong&gt;multiple ViewModels&lt;/strong&gt; to manage the complexity of those non-reusable UI elements. While this approach is acceptable, bear in mind that ViewModels operate with unbounded memory, and when you have multiple ViewModels, it can become challenging to monitor their size and memory footprint.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;where-to-hoist-state&quot;&gt;Where to hoist state&lt;/h2&gt;

&lt;p&gt;You should &lt;strong&gt;place state in the lowest common ancestor&lt;/strong&gt; that reads or writes the state.&lt;/p&gt;

&lt;p&gt;As a recap: In the UI, you might 1) not have state at all, 2) have state in the UI itself, 3) have state in a state holder in order to simplify the UI, 4) hoist the state higher up in the UI tree so that other composable callers or ancestors can control the state, 5) hoist the state in a ViewModel if it’s needed by business logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If the state is required by business logic, whether for reading or writing, it should be hoisted in the screen-level state holder. If not, it should be placed in the appropriate node of the UI tree.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at the UI hierarchy of a typical Chat app and discuss why certain state is placed where it is:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-19-crash-course-ui-layer-part-2_3.webp&quot; /&gt;
  &lt;small&gt;UI tree of a typical Chat app&lt;/small&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The screen UI state should be placed in the ViewModel (#5) because the ViewModel applies business logic to create it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The LazyList is part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConversationScreen&lt;/code&gt; and not the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MessagesList&lt;/code&gt; because the screen has additional functionality that require that state, such as scrolling to the most recent messages when the user sends a new message in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserInput&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn more about this topic, check out the &lt;a href=&quot;http://goo.gle/android-arch-hoist-state&quot;&gt;State hoisting in Compose talk&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/astamatok&quot;&gt;Alejandra Stamato&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hWwZ_AuSGfo?si=KLW-2SnL8aiEWQYp&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;saving-ui-state&quot;&gt;Saving UI state&lt;/h2&gt;

&lt;p&gt;In this blog post, we’ve explored the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidx.ViewModel&lt;/code&gt; API as a means to preserve state across configuration changes. However, Android provides additional alternatives to safeguard your state even more effectively.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;SavedState APIs enable your state to persist through configuration changes &lt;em&gt;and&lt;/em&gt; &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/saving-states&quot;&gt;system-initiated process death&lt;/a&gt;&lt;/strong&gt;. The system stores this data in a Bundle, requiring the data to be parcelized for storage. Typically, you’d store transient UI state that depends on user input or navigation.&lt;/p&gt;

&lt;p&gt;Ultimately, to survive not only the above but also unexpected app dismissals (e.g. the user killing your app), you can use &lt;strong&gt;persistent storage&lt;/strong&gt;. This is subject to disk space limitations and is typically used for storing application data.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-19-crash-course-ui-layer-part-2_4.webp&quot; /&gt;
  &lt;small&gt;Summary of the different APIs to save UI state on Android&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;For more information about this topic, check out the &lt;a href=&quot;http://goo.gle/android-arch-saving-state&quot;&gt;Saving UI state on Android talk&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/V-s4z7B_Gnc?si=YqEQEvcGnvSzmKuL&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After reading this crash course on the UI layer, you should have a general understanding of the processes occurring within this layer and the tools required to manage state and logic effectively.&lt;/p&gt;

&lt;p&gt;How Android is designed to make your app reactive to different UI Configurations and devices makes some API decision trees more complex than some Developers might like. But at the same time, it also gives you the tools to make your app behave as expected, delivering a great user experience.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed this read! Feel free to share your thoughts or ask questions in the comments section! Thank you 😊&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Remember that if you prefer to consume this content in video format, check out &lt;a href=&quot;https://www.droidcon.com/2023/11/15/peeling-back-the-layers-unmasking-the-ui-nknown&quot;&gt;the talk I delivered at Droidcon London 2023&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Manuel Vivo</name></author><category term="architecture" /><summary type="html">Part 2 - State Holders and Saving State</summary></entry><entry><title type="html">Crash Course on the Android UI Layer | Part 1</title><link href="https://manuelvivo.dev/crash-course-ui-layer-part-1" rel="alternate" type="text/html" title="Crash Course on the Android UI Layer | Part 1" /><published>2023-12-13T00:00:00+00:00</published><updated>2023-12-13T00:00:00+00:00</updated><id>https://manuelvivo.dev/crash-course-ui-layer-part-1</id><content type="html" xml:base="https://manuelvivo.dev/crash-course-ui-layer-part-1">&lt;p&gt;Part 1 - The UI and UI State&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;This blog post series aims to summarise the &lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer&quot;&gt;Android Developer guidance on the UI layer&lt;/a&gt;. We’ll explore all the entities involved in it, understand the role each part plays, and discuss best practices.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: By the end of this series, you will have a general understanding of what happens on the UI layer and how to best handle state and logic within it, the various APIs involved, and how to use them. Additionally, we’ll provide decision trees to assist you when you’re in doubt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is &lt;strong&gt;part 1&lt;/strong&gt;, where we’re covering the UI and the UI state. &lt;a href=&quot;https://manuelvivo.dev/crash-course-ui-layer-part-2&quot;&gt;&lt;strong&gt;Part 2&lt;/strong&gt; covers state holders&lt;/a&gt; and other UI layer-related topics such as where to hoist state and save state on Android.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you prefer to consume this content in video format, check out &lt;a href=&quot;https://www.droidcon.com/2023/11/15/peeling-back-the-layers-unmasking-the-ui-nknown&quot;&gt;the talk I delivered at Droidcon London 2023&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-ui-layer-in-the-grand-scheme-of-things&quot;&gt;The UI layer in the grand scheme of things&lt;/h2&gt;

&lt;p&gt;The UI layer isn’t the only layer you can find in a &lt;a href=&quot;https://developer.android.com/topic/architecture#modern-app-architecture&quot;&gt;typical app architecture&lt;/a&gt;. Alongside it, you can also find the &lt;a href=&quot;https://developer.android.com/topic/architecture/data-layer&quot;&gt;data layer&lt;/a&gt; and sometimes, the &lt;a href=&quot;https://developer.android.com/topic/architecture/domain-layer&quot;&gt;domain layer&lt;/a&gt;. According to the &lt;a href=&quot;http://goo.gle/mad-architecture-guide&quot;&gt;Android Architecture documentation&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;UI layer&lt;/strong&gt; displays data on the screen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;data layer&lt;/strong&gt; exposes application data and contains the vast majority of the business logic of the app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;domain layer&lt;/strong&gt; is an &lt;em&gt;optional&lt;/em&gt; layer that aims to 1) simplify and 2) reuse the potential business logic complexity of the UI layer. No less, no more.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The business logic is what gives value to your application. It’s the implementation of product requirements that determines how your app fetches, stores, and modifies data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-13-crash-course-ui-layer-part-1_1.webp&quot; /&gt;
  &lt;small&gt;Architecture layers in a typical Android app: The UI, data, and domain layers&lt;/small&gt;
&lt;/p&gt;

&lt;h2 id=&quot;entities-in-the-ui-layer&quot;&gt;Entities in the UI layer&lt;/h2&gt;

&lt;p&gt;The UI layer consists of three distinct entities with clearly defined responsibilities. This distinction helps with separation of concerns, enhances testability, and promotes reusability.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;UI&lt;/strong&gt;, or &lt;strong&gt;UI elements&lt;/strong&gt;, render data on the screen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;strong&gt;UI state&lt;/strong&gt; describes the data to render on the screen. If the UI represents what the user sees, the UI state is what the app specifies the user should see.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An optional &lt;strong&gt;state holder&lt;/strong&gt; is introduced to simplify the UI by managing a portion of its logic, holding its UI state, and exposing it to the UI. State holders are employed when the complexity of state and logic within the UI increases, making it more challenging to reason about.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-13-crash-course-ui-layer-part-1_2.webp&quot; /&gt;
  &lt;small&gt;Entities in the UI layer: The UI, UI state, and state holder&lt;/small&gt;
&lt;/p&gt;

&lt;h2 id=&quot;unidirectional-data-flow&quot;&gt;Unidirectional data flow&lt;/h2&gt;

&lt;p&gt;However, an app doesn’t show static information. Users regularly interact with it to perform operations that could potentially modify the application state. User events are typically handled by the state holder, and after processing them, they may result in a change in the UI state. In such cases, the UI state is not static. The state holder would expose a stream of UI state, and its emissions would be immediately reflected in the UI. This concept is also referred to as &lt;a href=&quot;https://developer.android.com/topic/architecture#unidirectional-data-flow&quot;&gt;&lt;strong&gt;Unidirectional Data Flow (UDF)&lt;/strong&gt;&lt;/a&gt; in the documentation.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-13-crash-course-ui-layer-part-1_3.webp&quot; /&gt;
  &lt;small&gt;In Unidirectional Data Flow, Events flow from the UI to the state holder, and state flows from the state holder to the UI&lt;/small&gt;
&lt;/p&gt;

&lt;h2 id=&quot;the-ui&quot;&gt;The UI&lt;/h2&gt;

&lt;p&gt;The guidance in the &lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer&quot;&gt;documentation&lt;/a&gt; and this blog post &lt;strong&gt;applies to both the View system and Jetpack Compose&lt;/strong&gt;. The role of the UI in the UI layer remains independent of your choice of UI toolkit.&lt;/p&gt;

&lt;p&gt;When considering the UI layer, Developers tend to imagine the UI layer just at the screen level — that part of the UI tree that shows application data in most parts of the available display. And typically, Developers use the &lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/viewmodel&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidx.ViewModel&lt;/code&gt;&lt;/a&gt; as a state holder implementation detail.&lt;/p&gt;

&lt;p&gt;However, just as you create “multiple” data layers for handling different types of data (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PaymentsRepository&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt;, etc.), you have the flexibility to introduce UI layer entities at any point in the UI tree, or UI hierarchy, where they are needed. The granularity of this decision depends on the complexity of your UI.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-13-crash-course-ui-layer-part-1_4.webp&quot; /&gt;
  &lt;small&gt;You can introduce the different entities in the UI layer in any part of the UI tree. For example, in the screen, the navigation rail, or simply in a button.&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;As we’ll see in the state holder sections, you can introduce a state holder at any point within the UI tree to simplify the UI. In fact, this is recommended in certain scenarios.&lt;/p&gt;

&lt;h2 id=&quot;the-ui-state&quot;&gt;The UI state&lt;/h2&gt;

&lt;p&gt;The UI state describes the information to be displayed on the screen. In this section, we’ll see how to model, produce, and observe the UI state.&lt;/p&gt;

&lt;h3 id=&quot;types-of-ui-state&quot;&gt;Types* of UI state&lt;/h3&gt;

&lt;p&gt;There’s a &lt;em&gt;subtype&lt;/em&gt; of UI state that usually requires special treatment—the &lt;strong&gt;Screen UI state&lt;/strong&gt;. This is often derived from the application state exposed from the data layer. This shout-out is because it contains most of the information displayed on the screen, which aligns with what the user is usually most interested in.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-13-crash-course-ui-layer-part-1_5.webp&quot; /&gt;
  &lt;small&gt;As a special type of UI state, the Screen UI state usually contains application data exposed by the data layer&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;As a sneak peek of what’s to come later, it’s important to note that the Screen UI state should persist or be cached across configuration changes.&lt;/p&gt;

&lt;h2 id=&quot;how-to-produce-ui-state&quot;&gt;How to produce UI state&lt;/h2&gt;

&lt;p&gt;Producing UI state is the &lt;strong&gt;output of the state holder processing some inputs&lt;/strong&gt;. These inputs can be: 1) events, 2) local sources of state change, or 3) external sources of state change.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-13-crash-course-ui-layer-part-1_6.webp&quot; /&gt;
  &lt;small&gt;The UI state is the output of the state holder processing some inputs&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;Which APIs should we use in different cases?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The UI state should be exposed as an &lt;strong&gt;observable data holder&lt;/strong&gt; class (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateFlow&lt;/code&gt;, Compose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&amp;lt;T&amp;gt;&lt;/code&gt;, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;). This type ensures that the UI always has a UI state to render on the screen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Inputs can take various forms, primarily as streams of data or one-shot APIs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see some examples of this!&lt;/p&gt;

&lt;h3 id=&quot;producing-ui-state-with-local-source-of-state-change&quot;&gt;Producing UI state with local source of state change&lt;/h3&gt;

&lt;p&gt;Imagine we’re on a screen that allows the user to roll two dice. Besides displaying the dice values, we also want to keep track of how many times the user rolls the dice. Our UI state could look like the following:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DiceRollUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;firstDiceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;secondDiceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;numberOfRolls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The business logic for rolling the dice is implemented through a one-shot call to the Random API.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;firstDiceValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;secondDiceValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numberOfRolls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfRolls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, how do we hold this UI state in the state holder? Creating an observable data holder class! In this example, we’re using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableStateFlow&lt;/code&gt; API to achieve this. To avoid direct dependencies on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random&lt;/code&gt; API, which could potentially impact reusability and testability, we introduce a more generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RandomProvider&lt;/code&gt; interface, with its implementation being the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random&lt;/code&gt; API.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DiceRollStateHolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;randomProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RandomProvider&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;_uiState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableStateFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DiceRollUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StateFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DiceRollUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asStateFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rollDice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;firstDiceValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;secondDiceValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numberOfRolls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfRolls&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The business logic for generating this UI state is &lt;strong&gt;local&lt;/strong&gt; to the state holder. To prevent exposing a mutable version of the observable state holder that would allow direct modification of the UI state and violate the single source of truth principle, we expose the UI state as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateFlow.uiState&lt;/code&gt; is the read-only version of our mutable state that we convert using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.asStateFlow&lt;/code&gt; operator.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableStateFlow&lt;/code&gt;, we could’ve also modelled our Ui State using Compose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&amp;lt;T&amp;gt;&lt;/code&gt; or even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveData&lt;/code&gt;. For patterns and best practices concerning the use of Compose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&amp;lt;T&amp;gt;&lt;/code&gt; in this context, check out the &lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer/state-production#compose-state&quot;&gt;State production docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;producing-ui-state-with-external-source-of-state-change&quot;&gt;Producing UI state with external source of state change&lt;/h3&gt;

&lt;p&gt;Application data comes from other layers of the hierarchy in the form of streams of data. To adapt this data to UI state, we must transform it into an observable data holder type. In the following example, we greet the user by displaying their name on the screen.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DiceRollViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserRepository&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StateFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stateIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModelScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;started&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SharingStarted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WhileSubscribed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;initialValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The state holder gets an instance of the data layer (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt;) as a dependency. It then maps the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;userStream: Flow&lt;/code&gt; to extract the specific information we are interested in, which in this case, is the user’s name. Since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; operator returns a Flow, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.stateIn&lt;/code&gt; operator to convert the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flow&lt;/code&gt; to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateFlow&lt;/code&gt;, an observable data holder type.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/state-in.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.stateIn&lt;/code&gt;&lt;/a&gt; is a common operator used in state holders when dealing with Flows from other layers of the hierarchy and/or combining multiple data streams. Its method definition contains:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scope&lt;/code&gt;: defines the lifecycle of the resulting StateFlow.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;started&lt;/code&gt;: determines the strategy for starting and stopping sharing. In the code snippet, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WhileSubscribed(5_000)&lt;/code&gt; to stop collecting data from upstream flows (e.g. the one coming from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UserRepository&lt;/code&gt;) when there are no collectors/observers for a specific period, in this case, 5 seconds. In this way, if the UI is not visible to the user for more than 5 seconds, we can cancel those data layer flow collections and save resources to protect the device’s health.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialValue&lt;/code&gt;: specifies the initial value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateFlow&lt;/code&gt;. As mentioned earlier, using an observable state holder type guarantees that the UI always has a UI state to render on the screen, and this parameter plays a crucial role in achieving that.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary-of-producing-ui-state&quot;&gt;Summary of producing UI state&lt;/h3&gt;

&lt;p&gt;Let’s see a summary of what types to expose based on the type of input and the source API:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you’re using one-shot APIs or local business logic, use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableStateFlow&lt;/code&gt; or Compose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableState&amp;lt;T&amp;gt;&lt;/code&gt; to store the state in your state holder. Then, expose it as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateFlow&lt;/code&gt; or Compose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When the source type is an external stream provided as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flow&lt;/code&gt;, you should expose a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateFlow&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are dealing with both types of input, such as having at least one external stream, combine all the inputs and expose the UI state as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateFlow&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-13-crash-course-ui-layer-part-1_7.webp&quot; /&gt;
  &lt;small&gt;Summary of the UI state exposed type given the source type and API&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;For more information about this topic, check out the &lt;a href=&quot;http://goo.gle/android-arch-producing-state&quot;&gt;State holders and state production talk&lt;/a&gt; or the &lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer/state-production&quot;&gt;UI layer State production docs&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pCX9wvu-Bq0?si=IXGzPbEY1ScL1PLZ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;how-to-model-ui-state&quot;&gt;How to model UI state&lt;/h2&gt;

&lt;p&gt;The UI state describes the UI at a certain point in time. The UI is the visual representation of the UI state. We previously defined a UI state defined as a data class in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiceRollUiState&lt;/code&gt; code snippet above. Here it is again:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DiceRollUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;firstDiceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;secondDiceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;numberOfRolls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s crucial that the fields in the UI state are immutable (i.e. vals) to ensure timing and consistency guarantees. Typically, UI state fields have sensible default values to facilitate creation and copying. However, not all UI states are that straightforward as the previous one.&lt;/p&gt;

&lt;p&gt;Let’s consider a different scenario where we want to enable the user to roll the dice only when they are logged in. When the user lands on the screen, we check the user state and make a decision. Here’s a possible UI state for this case:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DiceRollUiState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Loading&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DiceRollUiState&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DiceRoll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;numberOfRolls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;firstDiceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;secondDiceValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DiceRollUiState&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogUserIn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DiceRollUiState&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The UI state would be either loading (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Loading&lt;/code&gt;), indicating that the user needs to log in (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LogUserIn&lt;/code&gt;), or displaying the dice roll values with the username on the screen (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiceRoll&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;When should you use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data class&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed interface&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; or a combination of both?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed interface&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; when the screen can be in multiple &lt;strong&gt;exclusive&lt;/strong&gt; states.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data class&lt;/code&gt; when the data inside it can mutate. This is particularly useful in screens following an &lt;a href=&quot;https://developer.android.com/topic/architecture/data-layer/offline-first&quot;&gt;offline-fist&lt;/a&gt; approach where the screen might simultaneously display loading indicators, data, and error messages.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-model-complex-ui-state&quot;&gt;How to model complex UI state&lt;/h3&gt;

&lt;p&gt;When dealing with complex screens, you need to make sure you don’t create UI inconsistencies. As an exercise, let’s try to model the home screen of &lt;a href=&quot;https://github.com/android/compose-samples/tree/main/JetNews&quot;&gt;Jetnews&lt;/a&gt;, a Compose sample app.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2023-12-13-crash-course-ui-layer-part-1_8.webp&quot; /&gt;
  &lt;small&gt;Home screen of Jetnews displayed on a tablet&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;The primary content of the screen presents a feed of articles and an open article details section where users can read the article. As a preliminary step to model the entire UI screen, one might define the following UI state:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeViewModelState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;postsFeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsFeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;selectedPostId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isArticleOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;favorites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emptySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;errorMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ErrorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;searchInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, there’s a problem. Can you spot it? Due to the default values, we could create UI inconsistencies! We could have a UI state with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selectedPostId&lt;/code&gt; &lt;em&gt;without&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postsFeed&lt;/code&gt;. That wouldn’t be realistic, that should never occur. To resolve this issue, we need to introduce a more strongly typed state to prevent these problems. Considering that our business requirements allow either posts or nothing to be displayed on the screen, we can introduce a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed interface&lt;/code&gt; on top of this state:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeUiState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;errorMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ErrorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;searchInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;errorMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ErrorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;searchInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeUiState&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HasPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;postsFeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsFeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;selectedPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isArticleOpen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;favorites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;errorMessages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ErrorMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;searchInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeUiState&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now our UI would either show &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HasPosts&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NoPosts&lt;/code&gt;. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HasPosts&lt;/code&gt; variant, it’s not possible to have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;selectedPost&lt;/code&gt; without an existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;postsFeed&lt;/code&gt;. Problem solved! While the initial approximation of our UI state could still prove useful for modelling the entire UI state privately, this type is never exposed. Ultimately, you would map that state to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HomeUiState&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeViewModelState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeUiState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postsFeed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;HomeUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NoPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;HomeUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HasPosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;exposing-single-vs-multiple-ui-state-streams&quot;&gt;Exposing single vs multiple UI state streams&lt;/h3&gt;

&lt;p&gt;We often engage in discussions regarding whether a state holder should expose a single or multiple streams of data.&lt;/p&gt;

&lt;p&gt;What we’ve been advising people so far is that you’d &lt;strong&gt;expose a single stream of UI state if fields depend on each other&lt;/strong&gt;. On the other hand, if those fields are independent of each other and do not lead to UI inconsistencies, it’s acceptable to expose multiple streams.&lt;/p&gt;

&lt;p&gt;Some may argue that if they are entirely independent, it implies they affect different parts of the UI, and each of those parts could have their own state holders. Sure, I agree. But if you don’t want to create multiple state holders and expose multiple UI states from a higher level one, that’s acceptable as well.&lt;/p&gt;

&lt;h2 id=&quot;how-to-consume-ui-state&quot;&gt;How to consume UI state&lt;/h2&gt;

&lt;p&gt;Ideally, UI state should be consumed from the UI in a lifecycle-aware manner. That is, only when the UI is visible on the screen. In the Android lifecycle, that is when the lifecycle is above the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STARTED&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STOPPED&lt;/code&gt; states. There are different APIs available to do this in an easy way.&lt;/p&gt;

&lt;p&gt;For Android Views, you can use the &lt;a href=&quot;https://developer.android.com/reference/kotlin/androidx/lifecycle/package-summary#(androidx.lifecycle.Lifecycle).repeatOnLifecycle(androidx.lifecycle.Lifecycle.State,kotlin.coroutines.SuspendFunction1)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repeatOnLifecycle&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.android.com/reference/kotlin/androidx/lifecycle/package-summary#(kotlinx.coroutines.flow.Flow).flowWithLifecycle(androidx.lifecycle.Lifecycle,androidx.lifecycle.Lifecycle.State)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flowWithLifecycle&lt;/code&gt;&lt;/a&gt; APIs, which are found in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidx.lifecycle.lifecycle-runtime-ktx&lt;/code&gt; artifact. Here’s how you’d use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repeatOnLifecycle&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lifecycleScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;repeatOnLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STARTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// New UI state! Update the UI&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repeatOnLifecycle&lt;/code&gt; coroutine block, you collect from the UI state. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repeatOnLifecycle&lt;/code&gt; automatically creates a new coroutine that executes the block when the lifecycle reaches that state, and cancels the coroutine running the block when it falls below that Lifecycle state.&lt;/p&gt;

&lt;p&gt;In Compose, use the &lt;a href=&quot;https://developer.android.com/reference/kotlin/androidx/lifecycle/compose/package-summary#(kotlinx.coroutines.flow.StateFlow).collectAsStateWithLifecycle(androidx.lifecycle.Lifecycle,androidx.lifecycle.Lifecycle.State,kotlin.coroutines.CoroutineContext)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt;&lt;/a&gt; API that uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repeatOnLifecycle&lt;/code&gt; API under the hood. This is available in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidx.lifecycle.lifecycle-runtime-compose&lt;/code&gt; artifact. This API collects the underlying flow given a certain lifecycle State, and represents the latest value of the flow as Compose &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&amp;lt;T&amp;gt;&lt;/code&gt;. This allows the composable function to recompose whenever a new element is emitted.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Composable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SomeScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeUiState&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collectAsStateWithLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Emit UI given uiState. SomeScreen will recompose&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// whenever `viewModel.uiState` emits a new value.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more information about collecting in a lifecycle-aware manner, watch the &lt;a href=&quot;http://goo.gle/android-arch-consume-state&quot;&gt;Collect flows on Android talk&lt;/a&gt; or read the &lt;a href=&quot;https://manuelvivo.dev/coroutines-addrepeatingjob&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repeatOnLifecycle&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://manuelvivo.dev/consuming-flows-compose&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt;&lt;/a&gt; articles. If you’re interested in how these APIs were created, read the &lt;a href=&quot;https://medium.com/androiddevelopers/repeatonlifecycle-api-design-story-8670d1a7d333&quot;&gt;repeatOnLifecycle API design story blog post&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6hNXFs1fYaY?si=oVVx8arIw35C9ceW&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;hr /&gt;

&lt;p&gt;Now that you’ve read part 1 of the crash course on the UI layer, you should have a general understanding of the different entities present on this layer, and how to think about the UI and UI state effectively.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;(https://manuelvivo.dev/crash-course-ui-layer-part-2)&quot;&gt;&lt;strong&gt;In part 2&lt;/strong&gt;&lt;/a&gt;, we’ll cover state holders and other UI layer-related topics such as where to hoist state and saving state on Android.&lt;/p&gt;

&lt;p&gt;👋 See you there!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Remember that if you prefer to consume this content in video format, check out &lt;a href=&quot;https://www.droidcon.com/2023/11/15/peeling-back-the-layers-unmasking-the-ui-nknown&quot;&gt;the talk I delivered at Droidcon London 2023&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Manuel Vivo</name></author><category term="architecture" /><summary type="html">Part 1 - The UI and UI State</summary></entry><entry><title type="html">Saving UI state on Android</title><link href="https://manuelvivo.dev/saving-ui-state" rel="alternate" type="text/html" title="Saving UI state on Android" /><published>2023-05-10T00:00:00+00:00</published><updated>2023-05-10T00:00:00+00:00</updated><id>https://manuelvivo.dev/saving-ui-state</id><content type="html" xml:base="https://manuelvivo.dev/saving-ui-state">&lt;p&gt;Google I/O 2023 talk&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;Saving a UI state properly is essential for providing a great UX experience. Your users might be disappointed if your screen doesn’t preserve its state during a configuration change, activity recreation, or system-initiated process death. Learn best practices to save UI state properly in both the View system and Jetpack Compose by comparing APIs such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remember&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rememberSaveable&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onSaveInstanceState&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SavedStateHandle&lt;/code&gt;.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/V-s4z7B_Gnc&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/topic/libraries/architecture/saving-states&quot;&gt;Save UI states&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/jetpack/compose/state-saving&quot;&gt;Save UI state in Compose&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/mad-architecture-guide&quot;&gt;Guide to app architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/architecture-ui-layer&quot;&gt;UI layer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer/stateholders&quot;&gt;State holders and UI State&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer/state-production&quot;&gt;UI State production&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/architecture-viewmodel&quot;&gt;ViewModel overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/architecture-recommendations&quot;&gt;Architecture recommendations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Manuel Vivo</name></author><category term="talks" /><category term="architecture" /><summary type="html">Google I/O 2023 talk</summary></entry><entry><title type="html">State holders and state production in the UI Layer</title><link href="https://manuelvivo.dev/state-holders-ui-layer" rel="alternate" type="text/html" title="State holders and state production in the UI Layer" /><published>2022-10-25T00:00:01+00:00</published><updated>2022-10-25T00:00:01+00:00</updated><id>https://manuelvivo.dev/state-holders-ui-layer</id><content type="html" xml:base="https://manuelvivo.dev/state-holders-ui-layer">&lt;p&gt;Android Dev Summit 2022 talk&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;The UI layer displays application data on the screen. But how is it done exactly? We dive deep into the UI state production pipeline and state holders that manage UI complexity. Get to know the differences between UI and business logic, a ViewModel and a plain state holder class, state and events, and more! What is all that, when to use which, and how to do it.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/pCX9wvu-Bq0&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/mad-architecture-guide&quot;&gt;Guide to app architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/architecture-ui-layer&quot;&gt;UI layer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer/stateholders&quot;&gt;State holders and UI State&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer/state-production&quot;&gt;UI State production&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer/events&quot;&gt;UI events&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/architecture-viewmodel&quot;&gt;ViewModel overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://goo.gle/architecture-recommendations&quot;&gt;Architecture recommendations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Manuel Vivo</name></author><category term="talks" /><category term="architecture" /><summary type="html">Android Dev Summit 2022 talk</summary></entry><entry><title type="html">Collecting flows in a lifecycle-aware manner</title><link href="https://manuelvivo.dev/collecting-flows-video" rel="alternate" type="text/html" title="Collecting flows in a lifecycle-aware manner" /><published>2022-10-25T00:00:00+00:00</published><updated>2022-10-25T00:00:00+00:00</updated><id>https://manuelvivo.dev/collecting-flows-video</id><content type="html" xml:base="https://manuelvivo.dev/collecting-flows-video">&lt;p&gt;Android Dev Summit 2022 talk&lt;/p&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;Collecting flows in a lifecycle-aware manner is the recommended way to collect flows on Android. In this talk, we explore the different APIs you have to do so, such as the repeatOnLifecycle API or collectAsStateWithLifecycle API in Jetpack Compose, and see how they work under the hood.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6hNXFs1fYaY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Manuel Vivo</name></author><category term="talks" /><category term="architecture" /><summary type="html">Android Dev Summit 2022 talk</summary></entry><entry><title type="html">Consuming flows safely in Jetpack Compose</title><link href="https://manuelvivo.dev/consuming-flows-compose" rel="alternate" type="text/html" title="Consuming flows safely in Jetpack Compose" /><published>2022-08-10T00:00:00+00:00</published><updated>2022-08-10T00:00:00+00:00</updated><id>https://manuelvivo.dev/consuming-flows-compose</id><content type="html" xml:base="https://manuelvivo.dev/consuming-flows-compose">&lt;p&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; API to collect flows in a lifecycle-aware manner from your UI.&lt;/p&gt;

&lt;p&gt;Collecting flows in a lifecycle-aware manner is the &lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer#consume-ui-state&quot;&gt;recommended way&lt;/a&gt; to collect flows on Android. If you’re building an Android app with Jetpack Compose, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; API to collect flows in a lifecycle-aware manner from your UI.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; allows your app to save app resources when not needed, such as when the app is in the background. Keeping resources alive unnecessarily can impact the user’s device health. Such resources may include firebase queries, location or network updates, and database connections.&lt;/p&gt;

&lt;p&gt;Keep reading to know more about this API, why you should collect in a lifecycle-aware manner, and how it compares to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsState&lt;/code&gt; API.&lt;/p&gt;

&lt;h2 id=&quot;collectasstatewithlifecycle&quot;&gt;collectAsStateWithLifecycle&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; is a composable function that collects values from a flow and represents the latest value as Compose &lt;a href=&quot;https://developer.android.com/reference/kotlin/androidx/compose/runtime/State&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt;&lt;/a&gt; in a lifecycle-aware manner. Every time a new flow emission occurs, the value of this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State&lt;/code&gt; object updates. This causes a recomposition of every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;State.value&lt;/code&gt; usage in the Composition.&lt;/p&gt;

&lt;p&gt;By default, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; uses &lt;a href=&quot;https://developer.android.com/reference/android/arch/lifecycle/Lifecycle.State#started&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lifecycle.State.STARTED&lt;/code&gt;&lt;/a&gt; to start and stop collecting values from the flow. This occurs when the Lifecycle moves in and out of the target state. This lifecycle state is something you can configure in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minActiveState&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2022-08-10-consuming-flows-compose-1.png&quot; /&gt;
  &lt;small&gt;collectAsStateWithLifecycle cancels the flow collection when the app is in the background by default&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;The following snippet demonstrates is how to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; to collect a StateFlow’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uiState&lt;/code&gt; field that a ViewModel in your composable function has exposed:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Copyright 2022 Google LLC.   
   SPDX-License-Identifier: Apache-2.0 */&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@OptIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExperimentalLifecycleComposeApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Composable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthorRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;onBackClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hiltViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorScreenUiState&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collectAsStateWithLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;AuthorScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authorState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;newsState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onBackClick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onFollowClick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;followAuthorToggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Every time the &lt;a href=&quot;https://github.com/android/nowinandroid/blob/main/feature-author/src/main/java/com/google/samples/apps/nowinandroid/feature/author/AuthorViewModel.kt&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthorViewModel&lt;/code&gt;&lt;/a&gt;’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uiState&lt;/code&gt; emits a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthorScreenUiState&lt;/code&gt; value, &lt;a href=&quot;https://github.com/android/nowinandroid/blob/main/feature-author/src/main/java/com/google/samples/apps/nowinandroid/feature/author/AuthorScreen.kt&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AuthorRoute&lt;/code&gt;&lt;/a&gt; will be recomposed. For more usages of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt;, check out the &lt;a href=&quot;https://github.com/android/nowinandroid/search?q=collectAsStateWithLifecycle&quot;&gt;Now in Android app&lt;/a&gt;, and &lt;a href=&quot;https://github.com/android/nowinandroid/pull/166&quot;&gt;its migration PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To start using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; API in your project, add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidx.lifecycle.lifecycle-runtime-compose&lt;/code&gt; artifact to your project.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Copyright 2022 Google LLC.   
   SPDX-License-Identifier: Apache-2.0 */&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// app/build.gradle file&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;androidx.lifecycle:lifecycle-runtime-compose:2.6.0-alpha01&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: This is a new API that is &lt;a href=&quot;https://developer.android.com/jetpack/androidx/releases/lifecycle#version_26_2&quot;&gt;currently in alpha&lt;/a&gt;. Additionally, it requires opting in to the &lt;a href=&quot;https://developer.android.com/reference/kotlin/androidx/lifecycle/compose/ExperimentalLifecycleComposeApi&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ExperimentalLifecycleComposeApi&lt;/code&gt;&lt;/a&gt; annotation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;under-the-hood&quot;&gt;Under the hood&lt;/h2&gt;

&lt;p&gt;Under the hood, the &lt;a href=&quot;https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:lifecycle/lifecycle-runtime-compose/src/main/java/androidx/lifecycle/compose/FlowExt.kt;l=168&quot;&gt;implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt;&lt;/a&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repeatOnLifecycle&lt;/code&gt; API which is the recommended way to collect flows in Android using the View system.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; saves you from typing the boilerplate code shown below that also collects flows in a lifecycle-aware manner from a composable function:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Copyright 2022 Google LLC.   
   SPDX-License-Identifier: Apache-2.0 */&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Composable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthorRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lifecycle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalLifecycleOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uiState&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AuthorScreenUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;initialValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeatOnLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STARTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;AuthorScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;flow-collection-in-your-architecture&quot;&gt;Flow collection in your architecture&lt;/h2&gt;

&lt;p&gt;Types in your app architecture shouldn’t know about the implementation details of other types. The UI shouldn’t know &lt;em&gt;how&lt;/em&gt; the ViewModel produces the UI state. If the UI is not visible on the screen, the flow collection should stop to free up app resources if appropriate.&lt;/p&gt;

&lt;p&gt;The UI can help free up resources by collecting the UI state using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt;. The ViewModel can do the same by producing the UI state in a collector-aware manner. If there are no collectors , such as when the UI isn’t visible on screen, stop the upstream flows coming from the data layer. You can do so using the &lt;a href=&quot;https://github.com/android/nowinandroid/blob/main/feature-author/src/main/java/com/google/samples/apps/nowinandroid/feature/author/AuthorViewModel.kt#L104&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.stateIn(WhileSubscribed)&lt;/code&gt;&lt;/a&gt; flow API when producing the UI state. For more information about this, watch &lt;a href=&quot;https://youtu.be/fSB6_KE95bU?t=1009&quot;&gt;this part of the Kotlin flows in practice talk&lt;/a&gt;. For testing the ViewModel producing UI state in this way, check out the &lt;a href=&quot;https://developer.android.com/kotlin/flow/test#statein&quot;&gt;testing guide&lt;/a&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2022-08-10-consuming-flows-compose-2.png&quot; /&gt;
  &lt;small&gt;In the UI layer, consume the UI state using collectAsStateWithLifecycle and produce it using .stateIn(WhileSubscribed) when the data layer exposes reactive streams. This enables the rest of the app to free up resources when not needed.&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;Consumers and producers of flows don’t need to know how each other is implemented. Figuring out implementation details in a big app with multiple environments, variants, libraries, and features can be very time consuming. And even worse, maintaining code that relies on implementation details is hard.&lt;/p&gt;

&lt;h2 id=&quot;keeping-resources-active-in-the-background&quot;&gt;Keeping resources active in the background&lt;/h2&gt;

&lt;p&gt;Android apps can run on a myriad of Android devices. Unfortunately, not all devices and not all users have endless resources. Apps usually run in a constrained environment. When an Android app is running, there are important factors that impact the user experience and device system health:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CPU usage&lt;/strong&gt;: CPUs have the highest battery consumption of all device components. Battery life is a perennial user concern. If abused, users might uninstall your app.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Data usage&lt;/strong&gt;: Reducing network traffic in an app when not connected to Wi-Fi can help users save money.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Memory usage&lt;/strong&gt;: How an app uses memory can have a very large impact on the overall stability and performance of the device.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An Android developer that wants to respect the user, device system health, or &lt;a href=&quot;https://developer.android.com/docs/quality-guidelines/build-for-billions&quot;&gt;build for billions&lt;/a&gt; should optimize these different factors depending on the market, devices, or countries they’re targeting. Keeping unneeded resources alive can have a negative impact depending on the type of device and the Android version the device is running. Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; in the UI layer enables the rest of the hierarchy to free up resources.&lt;/p&gt;

&lt;h2 id=&quot;collectasstate-comparison&quot;&gt;collectAsState comparison&lt;/h2&gt;

&lt;p&gt;Developers often ask: if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; is the safest way to collect flows from composable functions in Android, &lt;em&gt;why do we need the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsState&lt;/code&gt; API now? or why not add the lifecycle-aware functionality to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsState&lt;/code&gt; instead of creating a new API?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The lifecycle of a composable function is agnostic to the platform Compose is running on. As documented on the &lt;a href=&quot;https://developer.android.com/jetpack/compose/lifecycle&quot;&gt;Lifecycle of composables page&lt;/a&gt;, instances of composable functions enter the Composition, recompose 0 or more times, and leave the Composition.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2022-08-10-consuming-flows-compose-3.png&quot; /&gt;
  &lt;small&gt;Lifecycle of an instance of a composable function in the Composition.&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsState&lt;/code&gt; API follows the Composition’s lifecycle. It starts collecting the flow when the composable enters the Composition and stops collecting when it leaves the Composition. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsState&lt;/code&gt; is the platform-agnostic API you can use to collect flows.&lt;/p&gt;

&lt;p&gt;However, when using Compose in an Android app, the Android lifecycle also plays a critical role in how resources should be managed. Even if Compose halts recompositions while the Android app is in the background, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsState&lt;/code&gt; keeps the collection active. This makes it impossible for the rest of the hierarchy to free up resources.&lt;/p&gt;

&lt;p&gt;Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsState&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; have a purpose in Compose. The latter when developing Android apps, the former when developing for other platforms.&lt;/p&gt;

&lt;p&gt;Migrating from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsState&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; is a no-brainer:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Copyright 2022 Google LLC.   
   SPDX-License-Identifier: Apache-2.0 */&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@OptIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExperimentalLifecycleComposeApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Composable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AuthorRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onBackClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hiltViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;   &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorScreenUiState&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collectAsState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;   &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthorScreenUiState&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collectAsStateWithLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;AuthorScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;authorState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;newsState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newsState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;onBackClick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBackClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;onFollowClick&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;followAuthorToggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Collecting flows in a lifecycle-aware manner is the recommended way to collect flows on Android to enable other parts of your app to free up resources if needed.&lt;/p&gt;

&lt;p&gt;If you’re building an Android app with Jetpack Compose, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collectAsStateWithLifecycle&lt;/code&gt; composable function to do this.&lt;/p&gt;

&lt;p&gt;P.S. Thanks to &lt;a href=&quot;https://medium.com/u/e0a4c9469bb5&quot;&gt;Jose Alcérreca&lt;/a&gt;, &lt;a href=&quot;https://medium.com/u/ec2087b3c81f&quot;&gt;Marton Braun&lt;/a&gt;, &lt;a href=&quot;https://medium.com/u/92c44d274e60&quot;&gt;Alejandra Stamato&lt;/a&gt;, and Jake Roseman for reviewing this article.&lt;/p&gt;</content><author><name>Manuel Vivo</name></author><category term="architecture" /><summary type="html">Use the collectAsStateWithLifecycle API to collect flows in a lifecycle-aware manner from your UI.</summary></entry><entry><title type="html">ViewModel One-off event antipatterns</title><link href="https://manuelvivo.dev/viewmodel-events-antipatterns" rel="alternate" type="text/html" title="ViewModel One-off event antipatterns" /><published>2022-06-01T00:00:00+00:00</published><updated>2022-06-01T00:00:00+00:00</updated><id>https://manuelvivo.dev/viewmodel-events-antipatterns</id><content type="html" xml:base="https://manuelvivo.dev/viewmodel-events-antipatterns">&lt;p&gt;You should handle ViewModel events immediately, causing a UI state update.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer/events#handle-viewmodel-events&quot;&gt;ViewModel events&lt;/a&gt; are actions originated from the ViewModel that the UI should perform. For example, displaying an informative message to the user, or navigating to a different screen when the application state changes.&lt;/p&gt;

&lt;p&gt;Our guidance on ViewModel events is opinionated in two different ways:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Whenever a one-off event originates in the ViewModel, &lt;strong&gt;the ViewModel should handle that event immediately causing a state update&lt;/strong&gt;. The ViewModel should only expose application state. Exposing events that haven’t been &lt;em&gt;reduced&lt;/em&gt; to state from a ViewModel means the ViewModel is not the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_source_of_truth&quot;&gt;source of truth&lt;/a&gt; for the state derived from those events; &lt;a href=&quot;https://developer.android.com/jetpack/compose/architecture#udf&quot;&gt;Unidirectional Data Flow&lt;/a&gt; (UDF) describes the advantages of sending events only to consumers that outlive their producers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;State should be exposed using an observable data holder type.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;assets/images/2022-06-01-viewmodel-events-antipatterns-1.png&quot; /&gt;
  &lt;small&gt;Following UDF, state flows down from the ViewModel to the UI, and events go up from the UI to the ViewModel&lt;/small&gt;
&lt;/p&gt;

&lt;p&gt;In your app, you might be exposing ViewModel events to the UI using &lt;a href=&quot;https://kotlinlang.org/docs/channels.html&quot;&gt;Kotlin Channels&lt;/a&gt; or other reactive streams such as &lt;a href=&quot;https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SharedFlow&lt;/code&gt;&lt;/a&gt;, or maybe this is a pattern you’ve seen in other projects. When the producer (the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;) outlives the consumer (UI—Compose or Views), which can be the case with ViewModel events, &lt;strong&gt;these APIs &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/issues/2886&quot;&gt;don’t guarantee&lt;/a&gt; the delivery and processing of those events. This can result in bugs and future problems for the developer, and it’s also an unacceptable user experience for most apps&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You should handle ViewModel events immediately, causing a UI state update. Trying to expose events as an object using other reactive solutions such as Channel or SharedFlow doesn’t guarantee the delivery and processing of the events.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;case-study&quot;&gt;Case Study&lt;/h2&gt;

&lt;p&gt;Here’s an example of the implementation of a ViewModel in an app’s typical payments flow. In the following code snippets, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MakePaymentViewModel&lt;/code&gt; directly tells the UI to navigate to the payment result screen when the result of the payment request comes back. We’ll use this example to explore why handling one-off ViewModel events like this brings problems and higher engineering costs.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakePaymentViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StateFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MakePaymentUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ⚠️⚠️ DO NOT DO THIS!! ⚠️⚠️&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This one-off ViewModel event hasn't been handled nor reduced to state&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Boolean represents whether or not the payment was successful&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;_navigateToPaymentResultScreen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// `receiveAsFlow` makes sure only one collector will process each&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// navigation event to avoid multiple back stack entries&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;navigateToPaymentResultScreen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_navigateToPaymentResultScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;receiveAsFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Protecting makePayment from concurrent callers&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If a payment is in progress, don't trigger it again&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;makePaymentJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makePayment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makePaymentJob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;makePaymentJob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModelScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLoading&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Show loading spinner&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isPaymentSuccessful&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paymentsRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makePayment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_navigateToPaymentResultScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPaymentSuccessful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ioe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makePaymentJob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The UI would then consume this event and navigate accordingly:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Jetpack Compose code&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Composable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MakePaymentScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onPaymentMade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakePaymentViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;currentOnPaymentMade&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rememberUpdatedState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onPaymentMade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lifecycle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalLifecycleOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Check whenever navigateToPaymentResultScreen emits a new value&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// to tell the caller composable the payment was made&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;LaunchedEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;repeatOnLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;STARTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigateToPaymentResultScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPaymentSuccessful&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;currentOnPaymentMade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPaymentSuccessful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Rest of the UI for the login screen.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Activity / Views code&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakePaymentActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakePaymentViewModel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewModels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lifecycleScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;repeatOnLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STARTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigateToPaymentResultScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPaymentSuccessful&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PaymentResultActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PAYMENT_RESULT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPaymentSuccessful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;navigateToPaymentResultScreen&lt;/code&gt; implementation seen above has multiple design flaws.&lt;/p&gt;

&lt;h2 id=&quot;antipattern-1-state-about-payment-completion-can-be-lost&quot;&gt;Antipattern #1: State about payment completion can be lost&lt;/h2&gt;

&lt;p&gt;A Channel &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/issues/2886&quot;&gt;doesn’t guarantee&lt;/a&gt; the delivery and processing of the events. Therefore, &lt;strong&gt;events can be lost, leaving the UI in an inconsistent state&lt;/strong&gt;. An example of this could happen when the UI (consumer) goes to the background and stops the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Channel&lt;/code&gt; collection just after the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt; (producer) sends an event. The same can be said for other APIs that aren’t an observable data holder type such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SharedFlow&lt;/code&gt;, which could emit events even if there are no consumers listening to them.&lt;/p&gt;

&lt;p&gt;This is an antipattern because the &lt;em&gt;payment result state&lt;/em&gt; modeled in the UI layer isn’t &lt;strong&gt;durable&lt;/strong&gt; or &lt;strong&gt;atomic&lt;/strong&gt; if we think about it in terms of an &lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID transaction&lt;/a&gt;. The payment may have succeeded as far as the repository is concerned, but we never moved to the proper next screen.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This antipattern could be mitigated by using Dispatchers.Main.immediate when sending and receiving events. However, if that’s not enforced by a lint check, this solution could be error-prone as devs could easily forget it.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;antipattern-2-telling-the-ui-to-take-an-action&quot;&gt;Antipattern #2: Telling the UI to take an action&lt;/h2&gt;

&lt;p&gt;For an app that supports multiple screen sizes, the UI action to perform given a ViewModel event might be different depending on the screen size. For example, the case study app should navigate to the payment result screen when running on a mobile phone; but if the app is running on a tablet, the action could show the result in a different part of the same screen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The ViewModel should tell the UI &lt;em&gt;what&lt;/em&gt; the app state is and the UI should determine &lt;em&gt;how&lt;/em&gt; to reflect that&lt;/strong&gt;. The ViewModel shouldn’t tell the UI which actions it should take.&lt;/p&gt;

&lt;h2 id=&quot;antipattern-3-not-handling-the-one-off-event-immediately&quot;&gt;Antipattern #3: Not handling the one-off event immediately&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Modeling the event as something that is &lt;em&gt;fire and forget&lt;/em&gt;—in flight—is what leads to problems&lt;/strong&gt;. It’s harder to comply with &lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID properties&lt;/a&gt;, so the highest possible data reliability and integrity cannot be ensured. State &lt;em&gt;is&lt;/em&gt;, events &lt;em&gt;happen&lt;/em&gt;. The longer an event isn’t handled, the harder the problem becomes. &lt;strong&gt;For ViewModel events, process the event as soon as possible and generate a new UI state from it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the case study, we created an object for the event—represented as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;—and exposed it using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Channel&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Create Channel with the event modeled as a Boolean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;_navigateToPaymentResultScreen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Trigger event&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_navigateToPaymentResultScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPaymentSuccessful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you do this, you’ve taken responsibility for ensuring things like exactly-once delivery and handling. If you must model an event as an object for some reason, limit its lifespan to be as short as possible so that it doesn’t have a chance to get lost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Handling a one-off event in the ViewModel usually comes down to a method call&lt;/strong&gt; — for example, updating the UI state. Once you call that method, you know whether it completed successfully or threw an exception, and you know that it happened exactly once.&lt;/p&gt;

&lt;h2 id=&quot;case-study-improvements&quot;&gt;Case Study Improvements&lt;/h2&gt;

&lt;p&gt;If you’re in one of these situations, &lt;strong&gt;reconsider &lt;em&gt;what&lt;/em&gt; that one-off ViewModel event actually means for your UI&lt;/strong&gt;. Handle them immediately and reduce them to UI state which is exposed using an observable data holder such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateFlow&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutableStateOf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UI state better represents the UI at a given point in time, it gives you more delivery and processing guarantees, it’s usually easier to test, and it integrates consistently with the rest of your app&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you struggle to find a way to reduce one-off ViewModel events to state, reconsider what that event actually means for your UI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the example above, the ViewModel &lt;em&gt;should&lt;/em&gt; expose what’s the actual application data — the payment data in this case — instead of telling the UI the action to take. The following is a better representation of that ViewModel event handled and reduced to state, and exposed using an observable data holder type.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakePaymentUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;paymentInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PaymentModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// PaymentResult models the application state of this particular payment attempt,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// `null` represents the payment hasn't been made yet.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;paymentResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PaymentResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakePaymentViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;_uiState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutableStateFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MakePaymentUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StateFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MakePaymentUiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asStateFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Protecting makePayment from concurrent callers&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If a payment is in progress, don't trigger it again&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;makePaymentJob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makePayment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makePaymentJob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;makePaymentJob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModelScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLoading&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isPaymentSuccessful&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paymentsRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makePayment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.)&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// The event of what to do when the payment response comes back&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// is immediately handled here. It causes a UI state update.&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;isLoading&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;paymentResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PaymentResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paymentInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPaymentSuccessful&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ioe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makePaymentJob&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the code above, &lt;strong&gt;the event is handled immediately by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_uiState.update&lt;/code&gt;&lt;/strong&gt; (#L27) with the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paymentResult&lt;/code&gt; data (#L30); there’s no way for this event to get lost now. The event has been reduced to state, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paymentResult&lt;/code&gt; field in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MakePaymentUiState&lt;/code&gt; reflects the payment result application data.&lt;/p&gt;

&lt;p&gt;With this, the UI would react to paymentResult changes and act accordingly:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Jetpack Compose code&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Composable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MakePaymentScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onPaymentMade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PaymentModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakePaymentViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;uiState&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collectAsState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paymentResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;currentOnPaymentMade&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rememberUpdatedState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onPaymentMade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LaunchedEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Tell the caller composable that the payment was made.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// the parent composable will act accordingly.&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;currentOnPaymentMade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paymentResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paymentModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paymentResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPaymentSuccessful&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Rest of the UI for the login screen.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Activity / Views code&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//////////////////////////////////////////////&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakePaymentActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakePaymentViewModel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewModels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lifecycleScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;repeatOnLifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;STARTED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paymentResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PaymentResultActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                            &lt;span class=&quot;s&quot;&gt;&quot;PAYMENT_RESULT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                            &lt;span class=&quot;n&quot;&gt;uiState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paymentResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isPaymentSuccessful&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;nf&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If in your use case the Activity doesn’t &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;finish()&lt;/code&gt; and is kept in the backstack, your ViewModel would need to expose a function to clear the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paymentResult&lt;/code&gt; from the UiState (i.e. setting the field to null) that will be called after the Activity starts the other one. An example of this can be found in the &lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer/events#consuming-trigger-updates&quot;&gt;Consuming events can trigger state updates section&lt;/a&gt; of the docs.&lt;/p&gt;

&lt;p&gt;As mentioned in the &lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer#additional-considerations&quot;&gt;UI layer’s additional considerations section&lt;/a&gt;, you can expose the UI state of your screen with multiple streams if that’s what your use case requires. What’s important is that those streams are observable data holder types. In the example above, a unique UI state stream is exposed because the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isLoading&lt;/code&gt; flag and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paymentResult&lt;/code&gt; property are highly intertwined. Separating them out could cause inconsistencies in the UI—for example, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isLoading&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;paymentResult&lt;/code&gt; isn’t &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;. By having them together in the same UiState class, we are more conscious of the different fields that make the UI state of the screen which lead us to fewer bugs.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hopefully, this blog post helped you understand the reasons why &lt;strong&gt;we recommend 1) handling one-off ViewModel events immediately and reducing them to state, and 2) exposing state using an observable data holder type&lt;/strong&gt;. We believe this approach gives you more delivery and processing guarantees, it’s usually easier to test, and it integrates consistently with the rest of your app.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: As with the rest of our Architecture guidance, treat this as a guideline and adapt it to your requirements as needed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For more information about this topic, check out the &lt;a href=&quot;https://developer.android.com/topic/architecture/ui-layer/events&quot;&gt;UI events documentation&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Special thanks to &lt;a href=&quot;https://twitter.com/adamwp&quot;&gt;Adam Powell&lt;/a&gt; for the endless discussions, knowledge, and input he’s given to this blog post. Also, to &lt;a href=&quot;https://twitter.com/astamatok&quot;&gt;Ale Stamato&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ppvi&quot;&gt;Jose Alcérreca&lt;/a&gt; for their thorough reviews.&lt;/p&gt;</content><author><name>Manuel Vivo</name></author><category term="architecture" /><summary type="html">You should handle ViewModel events immediately, causing a UI state update.</summary></entry></feed>